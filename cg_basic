1 イントロダクション
CGとは画面を構成する「画素」の色を決定することである
    自分のプログラムで計算
    ある程度は既存のライブラリを活用する
OpenGLライブラリ
    フラフィックライブラリ
GLUTライブラリ
OpenGLの基本：図形の描画
    glColor3d( , , ,); //色を指定
    glBegin(GL_  ); //何を描画するのか指定
     glVertex2d( , ) //頂点の指示
     glVertex2d( , ) //頂点の指示
    glEnd();
描画するものの指定
    GL_POINTS:　点
    GL_LINES: 線
    GL_LINE_STRIP:　折れ線
    GL_LINE_LOOP: 多角形
    GL_TRIANGLES:　三角形
    GL_QUADS: 四角形

2 二次元の座標変換
座標変換
    ある物体の位置，向き，形を変える
        拡大・縮小　glScaled(sx, sy, 1.0); //z座標は変化させない場合
        回転移動　glRotated(theta, 0, 0, 1.0); //回転角度，回転軸ベクトル
線形変換
    直線を直線に移す変換・原点の位置は変化しない変換
        回転
        スケーリング
        せん断
    平行移動　glTranslated(tx, ty, 0);
アフィン変換
    線形変換＋平行移動
    便宜上一つ次元を上げたベクトルを利用する
    複数解の座標変換操作が単純な行列の積の繰り返しだけですむ
様々な変換
    鏡映変換
    原点以外の点を中心とした回転
        平行移動→回転移動→平行移動(逆行列)
変換行列の操作
    glLoadIdentity();
        変換行列を初期化する
        描画更新をするたびに初期化が必要
変換行列の格納(Push)と取り出し(Pop)
    ある時点での座標変換行列を保存しておき，あとでまたその行列を取り出す
    行列スタックを使用　後入れ先出し
    glPushMatrix();
    glPopMatrix();
変換行列の階層化
ディスプレイリスト
    同じ形を複数描画する時に用いる
        描画命令の集合にID番号を割り振る
        次回からはこのID番号で描画を指示する
    glNesList(1, GL_COMPILE);
        //描画命令
    glEndList();
    glCallList(1);
ダブルバッファリング
    2つのフレームバッファを使用する
    バックバッファに描画が終わったら画面に結果を転送する
一定時間ごとの処理実行

3 3次元の座標変換
座標変換
    2次元の時と同様に一つ次元の多いベクトルと行列の演算で表現
        4×4の行列
    拡大縮小　glScaled(sx, sy, sz);
    平行移動 glRotated(theta, nx, ny, nz);
    回転移動 glTranslated(tx, ty, tz);
プログラム
    ビューポート変換行列の指定
        スクリーンのどこに表示するか
    投影変換行列の指定
        透視投影の行列を乗算
        ビューボリュームの指定
    モデルビュー変換行列の指定
        カメラの位置・姿勢の行列を乗算
    描画命令
        ワールドザ行系の座標を指定
ビュー変換
    物体をどのように画面に表示するか，どこから眺めるかを指定したい
    →カメラを基準とした座標系で物体の位置を表現
    →座標系を変換する
        カメラを基準とした座標系：カメラの位置が原点，カメラの向きが-z方向
    モデル座標系→モデル変換→ワールド座標系→ビュー変換→ビュー座標系
    glLookAt(eyex, eyey, eyez, //視点位置
            centerx, centery, centerz,　//注視点
            upx, upy, upz)　//upベクトル
投影変換　
    立体をどのように平面スクリーンに投影するか
    平行投影　奥行き情報を無視
    透視投影　奥行き情報を考慮　遠くのものほど小さい
        ビューボリューム
            スクリーンに写る範囲を指定
            ビューボリュームという四角錐台の形をした空間のみが最終的に画面に表示される
                前方クリッピング面，後方クリッピング面
            ビュー座標のスクリーンでの投影位置を考える
        計算
            単に4×4行列をかけても-zでの除算は表せない
            同次座標の導入
        gluPerspective(fovy,　//垂直方向の視野角
                        aspect, //アスペクト比（スクリーン横/縦)
                        znear, //near planeのz座標
                        zfar)　//far planeのz座標
            視野角が大きくなるにつれて物体は小さく表示される
    ビュー座標系→投影変換→クリップ座標系→w座標で除算→正規化デバイス座標系
ビューポート変換
    正規化デバイス座標系のx，y座標をスクリーンの大きさに合わせて拡大する
    正規化デバイス座標系→ビューポート変換→スクリーン座標系(ウィンドウ座標系)
    glViewport(x0, y0, w, h); 
モデルから表示までの変換　ビューイングパイプライン
    モデリング座標系→モデリング変換→ワールド座標系
    →視野変換→カメラ座標系→投影変換→投影座標系→ビューポート変換→ビューポート

4 GLUTを使ったアプリケーション開発
コールバック関数    
    glutKeyboardFunc //キーボード処理
    glutSpecialFunc //特殊キー押下時の処理
        int key
    glutMouseFunc //マウスクリック時の処理
        画面の左上が原点，プクセル数単位
    glutMotionFunc //マウスドラック時の処理
文字列の表示
ワールド座標をスクリーン座標に変換
    gluProject(objX, objY, objZ, //ワールド座標
                model,  //モデルビュー行列
                proj,   //透視投影行列
                view,   //ビューポート
                winX, winY, winZ);  //スクリーン座標
スクリーン座標をワールド座標に変換
    gluUnProject(winX, winY, winZ, //スクリーン座標
                model,  //モデルビュー行列
                proj,   //透視投影行列
                view,   //ビュポート
                objX, objY, objZ);　//ワールド座標
マウスピッキング
    画面上の物体をマウスクリックで選択
    実現方法
        各物体にID色を割り当てて描画
        クリックした点の色を調べてどの物体か判定

5 曲線・曲面の表現　「ベジェ曲線」
曲線の数学的表現
    陽関数表現 y=f(x)
        長所：実装が容易
        短所：表現力が乏しい
    陰関数表現  f(x, y)=0
        長所：複雑な曲線を表現できる
        短所：方程式を解かなくてはならない
    パラメトリック表現　
            x=fx(t)
            y=fy(t)
        長所：実装が容易　tの値の刻み幅で曲線の正確さを制御できる
ベジェ曲線
    最初と最後の制御点を通る
    制御点の凸包の内部に含まれる
    複数セグメントの連結
        2つのセグメントで短点を共有する
            制御点位置の共有，C0連続
        2つのセグメントで接栓を共有する
            制御点が同一直線上で等距離，C1連続
    N次ベジェ曲線
        ある比率で各制御点の座標を混ぜ合わせる
        混合比を関数で表したものを「基底関数」と呼ぶ
        バーンスタイン基底関数　

6　曲線・曲面の表現　「Bスプライン曲線」
基底関数
    曲線上の点の位置はパラメータtと制御点の位置によって定義される
    曲線上の点の位置は，制御店の座標を混ぜ合わせて作る
    この混ぜ合わせ型の係数関数を定義したものが基底関数である
Bスプライン曲線
    複数の曲線セグメントを繋ぎ合わせて作る
    セグメントが常に微分も含めて連続的に接続する
        接続の問題がない
        ベジェ曲線ではセグメント間の微分の連続性は保証されていない
    制御店を幾つでも指定できる
        曲線上の1点に着目した場合，その点の位置に影響を与えるのはベジェ曲線と同じ[次数+1]個の制御点
    パラメータtの値は0から1の範囲に限らない
        t_nからt_n+Lまで(nは次数，Lはセグメント数)
    ベジェ曲線を表現できる
    問題：放物線以外の2次曲線を厳密に表現できない
Bスプライン曲線の形を決めるもの
    制御点列:　P
    ノット列(ノットベクトル):　t
        接続点でのパラメータtの値の列
        ノット列の値は単調増加
    (制御点の数) = (次数) + (セグメント数)
    (ノット数) = 2×(次数) + (セグメント数+1)
Bスプライン曲線の数式表現
    基底関数は再帰的に求まる
    基底関数のグラフ(一様三次)
        ノットベクトルが一定の間隔で存在→一様
        あるtの値では4つのグラフが存在→4つの制御点が影響
        局所性
            曲線の制御が局所的
        最初と最後のノットを「次数＋1」個だけ重ねると，端点が制御点と一致し，ベジェ曲線と同等になる
    n次のBスプライン曲線は，基底関数がtに関する3次の区分的多項式で定義される
    n個の制御点を重ねることで尖点を作ることができる
    最低n+1個の制御点の線形結合で曲線が決まる
    n-1階微分まで滑らか

7 形状モデリング
点群モデル
    頂点座標だけを記録する
ワイヤーフレームモデル
    頂点座標，稜線だけを記録する
サーフェスモデル
    ワイヤーフレーム＋面情報
ソリッドモデル
    サーフェスモデル＋物体の内外を区別する情報
    境界表現
        頂点座標と稜線・面の接続関係で立体を表現
        幾何情報　頂点の座標値
        位相情報　立体表面がどのように構成されているかを定める
            ハーフエッジ構造
                移送情報を保持するデータ構造
                近傍の面，頂点，稜線に高速にアクセスできる
    CSG表現
        立体をプリミティブとその組み合わせで表現
        基本立体の種類，大きさ，位置情報，結合状態をツリー構造で表す
    スイープ表現
        平面図形を一定方向に移動した時の軌跡で立体を表現
        局所変形との組み合わせで様々な形状を表現可能
            オイラー操作(局所変形)
                ソリッドモデルに対する形状操作
                操作後のオイラー・ポアンカレの公式を常に満たす
                    ソリッドモデルに不変な構成要素の関係式
                    頂点数ー稜線数＋面数ー面内ループ数＝2(物体数ー貫通穴数)
                オイラー操作の組み合わせで任意のソリッドモデルを作成できる
その他の表現方法
    ボリューム表現
        立体をボクセルの集合で表す
    八分岐表現
        ボクセルを改装的に木構造で生成
        物体が存在するボクセルのみ細かく分割
    フラクタル図形  
        自己相似形状，再木構造
    中点変異法
        中点に起伏量を加える操作を繰り返す
        起伏量は正規分布に従う乱数によって決定
    メタボール
        莉っタイを急の集まりで表現
        距離と共に減衰する関数を定義し，その重ね合わせで形状を表現
    パーティクル
        形状が不定で，明確な表面が存在しない物体
        一定の規則に従って生成した多数の粒子で表現
            粒子の生成，移動，消滅，衝突述知的規則が必要
    三角メッシュ
        三角形の集合で形を表現する

8 レンダリング(1)
レンダリング
    モデリングによって定義された3次元形状を画面に描画する
    画素1つ1つに対して色を割り当てる
    レンダリング結果を定める要素
        カメラの位置や視野角
        光源の位置，方向，色
        物体表面の材質　光の反射の仕方
リアリティの要素
    遠近感
        透視投影変換
        デプスキューイング
    可視面表示
        陰線消去法
        隠面消去法
    表面の明るさ，影の表示
        物体属性：材質，表面の滑らかさ，色(反射特性)
        反射光計算　直接光＋関節光
レンダリングの処理
    透視投影→隠面消去法，ラスタ化→シェーディング→効果付加
隠面消去法
    back-face culling
        視線ベクトルと砲戦の内積
            正→見える　負→見えない
        限界：複数物体，凹形状は扱えない
    優先順位アルゴリズム　奥行きソート法
        限界：
            優先順位の付け方によっては正しく作用しない
            可視正の優先順位が決定できない場合がある
    スキャンライン法
        スキャンライン(走査)に基づいて隠面消去
    zバッファ法
        zバッファ：画素ごとの奥行き値(デプス値)を格納
        フレームバッファ：描画色を格納
        課題：反射や屈折を扱えない
    レイトレーシング(光線追跡法)
        レイ(視線) と物体との交差判定による隠面消去法
            交差判定
                交差する物体が1つ以上存在→全ての荒天の中で最も視点に近いものを求める
                                        その画素にか視点での物体の色を塗る
                物体が存在しない→その画素に背景色を塗る
        反射・透過・屈折を扱える
シェーディング
    表面の濃淡を光のあたり具合から計算
    シェーディングモデル
        環境光反射：一様に照らす
            環境光：物体表面に一様に照らす光
                    直接は光の届かない陰や影の部分にも明るさを与える
        拡散反射：法線方向と光源方向の内積
            Lambert反射モデル
                面上の明るさは，その位置での法線方向と光源方向との内積に比例
        鏡面反射：正反射方向と視線方向
            Phong反射モデル
                光が正反射する方向と視線方向との内積のn乗に比例する
                正反射方向Rの計算
シャドウイング
    影付　光が届くかどうかを判定
