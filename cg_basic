1 イントロダクション
CGとは画面を構成する「画素」の色を決定することである
    自分のプログラムで計算
    ある程度は既存のライブラリを活用する
OpenGLライブラリ
    フラフィックライブラリ
GLUTライブラリ
OpenGLの基本：図形の描画
    glColor3d( , , ,); //色を指定
    glBegin(GL_  ); //何を描画するのか指定
     glVertex2d( , ) //頂点の指示
     glVertex2d( , ) //頂点の指示
    glEnd();
描画するものの指定
    GL_POINTS:　点
    GL_LINES: 線
    GL_LINE_STRIP:　折れ線
    GL_LINE_LOOP: 多角形
    GL_TRIANGLES:　三角形
    GL_QUADS: 四角形

2 二次元の座標変換
座標変換
    ある物体の位置，向き，形を変える
        拡大・縮小　glScaled(sx, sy, 1.0); //z座標は変化させない場合
        回転移動　glRotated(theta, 0, 0, 1.0); //回転角度，回転軸ベクトル
線形変換
    直線を直線に移す変換・原点の位置は変化しない変換
        回転
        スケーリング
        せん断
    平行移動　glTranslated(tx, ty, 0);
アフィン変換
    線形変換＋平行移動
    便宜上一つ次元を上げたベクトルを利用する
    複数解の座標変換操作が単純な行列の積の繰り返しだけですむ
様々な変換
    鏡映変換
    原点以外の点を中心とした回転
        平行移動→回転移動→平行移動(逆行列)
変換行列の操作
    glLoadIdentity();
        変換行列を初期化する
        描画更新をするたびに初期化が必要
変換行列の格納(Push)と取り出し(Pop)
    ある時点での座標変換行列を保存しておき，あとでまたその行列を取り出す
    行列スタックを使用　後入れ先出し
    glPushMatrix();
    glPopMatrix();
変換行列の階層化
ディスプレイリスト
    同じ形を複数描画する時に用いる
        描画命令の集合にID番号を割り振る
        次回からはこのID番号で描画を指示する
    glNesList(1, GL_COMPILE);
        //描画命令
    glEndList();
    glCallList(1);
ダブルバッファリング
    2つのフレームバッファを使用する
    バックバッファに描画が終わったら画面に結果を転送する
一定時間ごとの処理実行

3 3次元の座標変換
座標変換
    2次元の時と同様に一つ次元の多いベクトルと行列の演算で表現
        4×4の行列
    拡大縮小　glScaled(sx, sy, sz);
    平行移動 glRotated(theta, nx, ny, nz);
    回転移動 glTranslated(tx, ty, tz);
プログラム
    ビューポート変換行列の指定
        スクリーンのどこに表示するか
    投影変換行列の指定
        透視投影の行列を乗算
        ビューボリュームの指定
    モデルビュー変換行列の指定
        カメラの位置・姿勢の行列を乗算
    描画命令
        ワールドザ行系の座標を指定
ビュー変換
    物体をどのように画面に表示するか，どこから眺めるかを指定したい
    →カメラを基準とした座標系で物体の位置を表現
    →座標系を変換する
        カメラを基準とした座標系：カメラの位置が原点，カメラの向きが-z方向
    モデル座標系→モデル変換→ワールド座標系→ビュー変換→ビュー座標系
    glLookAt(eyex, eyey, eyez, //視点位置
            centerx, centery, centerz,　//注視点
            upx, upy, upz)　//upベクトル
投影変換　
    立体をどのように平面スクリーンに投影するか
    平行投影　奥行き情報を無視
    透視投影　奥行き情報を考慮　遠くのものほど小さい
        ビューボリューム
            スクリーンに写る範囲を指定
            ビューボリュームという四角錐台の形をした空間のみが最終的に画面に表示される
                前方クリッピング面，後方クリッピング面
            ビュー座標のスクリーンでの投影位置を考える
        計算
            単に4×4行列をかけても-zでの除算は表せない
            同次座標の導入
        gluPerspective(fovy,　//垂直方向の視野角
                        aspect, //アスペクト比（スクリーン横/縦)
                        znear, //near planeのz座標
                        zfar)　//far planeのz座標
            視野角が大きくなるにつれて物体は小さく表示される
    ビュー座標系→投影変換→クリップ座標系→w座標で除算→正規化デバイス座標系
ビューポート変換
    正規化デバイス座標系のx，y座標をスクリーンの大きさに合わせて拡大する
    正規化デバイス座標系→ビューポート変換→スクリーン座標系(ウィンドウ座標系)
    glViewport(x0, y0, w, h); 
モデルから表示までの変換　ビューイングパイプライン
    モデリング座標系→モデリング変換→ワールド座標系
    →視野変換→カメラ座標系→投影変換→投影座標系→ビューポート変換→ビューポート

4 GLUTを使ったアプリケーション開発
コールバック関数    
    glutKeyboardFunc //キーボード処理
    glutSpecialFunc //特殊キー押下時の処理
        int key
    glutMouseFunc //マウスクリック時の処理
        画面の左上が原点，プクセル数単位
    glutMotionFunc //マウスドラック時の処理
文字列の表示
ワールド座標をスクリーン座標に変換
    gluProject(objX, objY, objZ, //ワールド座標
                model,  //モデルビュー行列
                proj,   //透視投影行列
                view,   //ビューポート
                winX, winY, winZ);  //スクリーン座標
スクリーン座標をワールド座標に変換
    gluUnProject(winX, winY, winZ, //スクリーン座標
                model,  //モデルビュー行列
                proj,   //透視投影行列
                view,   //ビュポート
                objX, objY, objZ);　//ワールド座標
マウスピッキング
    画面上の物体をマウスクリックで選択
    実現方法
        各物体にID色を割り当てて描画
        クリックした点の色を調べてどの物体か判定

5 曲線・曲面の表現　「ベジェ曲線」
曲線の数学的表現
    陽関数表現 y=f(x)
        長所：実装が容易
        短所：表現力が乏しい
    陰関数表現  f(x, y)=0
        長所：複雑な曲線を表現できる
        短所：方程式を解かなくてはならない
    パラメトリック表現　
            x=fx(t)
            y=fy(t)
        長所：実装が容易　tの値の刻み幅で曲線の正確さを制御できる
ベジェ曲線
    最初と最後の制御点を通る
    制御点の凸包の内部に含まれる
    複数セグメントの連結
        2つのセグメントで短点を共有する
            制御点位置の共有，C0連続
        2つのセグメントで接栓を共有する
            制御点が同一直線上で等距離，C1連続
    N次ベジェ曲線
        ある比率で各制御点の座標を混ぜ合わせる
        混合比を関数で表したものを「基底関数」と呼ぶ
        バーンスタイン基底関数
