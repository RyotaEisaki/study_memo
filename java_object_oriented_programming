オブジェクト指向
効率良く開発するための考え方の1つ
開発を効率良く行うための要素
    プログラムの独立性
        カプセル化
    プログラムの再利用性
        継承
    プログラムの拡張性
        ポリモーフィズム
カプセル化
    他のプログラムから中身が見えないように隠し、必要以上に干渉されないようにする仕組み
    Javaでは「クラス」という仕組みを使う
メソッド
    一定の処理を行うプログラムを部分化できる仕組み
クラスの継承
    public, protected, privateといったものをクラスやメソッドに付与することで制限をかけることができる
        public 他のクラスから制限なく利用ができる
        private 他のクラスから継承すらできないように制限
抽象化
    重要な要素や共通な要素を抜き出して他は無視する
    再利用できてかつ自由に改変できる性質を持つ
    拡張性を高めるために必要
    同じ性質や同じ要素を持ったプログラムを適切に分けてそれに対してふさわしいjavaの機能を使うことによって初めて実現される
オーバーライド
    クラスの作り方や継承の仕方の工夫
    継承したクラスでは継承元のクラスのプログラムにさらに処理を追加したり、上書きして変更することができる
        継承元のプログラムを上書きして変更することを「オーバーライド」と呼ぶ
    
オブジェクト指向エクササイズ
1   1つのメソッドにつきインデントは1段階までにすること
2   else句を使用しないこと
3   すべてのプリミティブ型と文字列型をラップすること
4   1行につきドットは1つまでにすること
5   名前を省略しないこと
6   すべてのエンティティを小さくすること
7   1つのクラスにつきインスタンス変数は2つまでにすること
8   ファーストクラスコレクションを使用すること
8   Getter, Setter, プロパティを使用しないこと

クラス
    これから作る「モノの定義」
    設計図
    プログラムを実行するための処理をまとめたオブジェクト
    クラスの処理の中にはメンバ変数や処理を実行するためのメソッドがある
フィールド
    変数
インスタンス
    クラスから作られた実働する「モノ」
    クラスという設計図から生み出された実際に働くモノ
    クラスからインスタンスを作ることを「インスタンス化」という
内部クラス
    クラスの中にクラスを作成
final class
    子クラスで継承することはできない
ラッパークラス
    int型などの基本データ型に用意されているクラス
抽象クラス
    実装を持たないシグネチャ(メソッド名、引数のかた、引数の数)と戻り値の型のみを実装したメソッドを1つ以上保持するクラス
コンストラクタ
    クラスのインスタンス生成時に実行されるメソッド
    そのクラスのメンバ変数(フィールド)を初期化するときに使用

Java言語は【 オブジェクト　】指向型の言語であり，クラスを組み合わせてプログラムを作りあげる．
クラスは【 オブジェクト 】の属性(データ)や機能(動作)を定義したものである．
クラス定義の中で【 オブジェクト 】の持つ属性(データ)を定義したものを【 フィールド 】とよび，機能(動作)を定義したものを【 メソッド 】とよぶ．
プログラムコードの中でnewを使って，クラスの【 インスタンス 】を生成することができる．
変数に格納できるもの（【 フィールド 】の引数の型に指定できるもの）は，intやdoubleなどの【 基本 】型と，【 4 】 のメモリ中の場所を表わす【 参照 】型のどちらかである．
【 参照 】型の変数に，場所の情報が何も入っていない状態を【 null 】というキーワードで表現する．

メソッドやフィールドの順序は、全く任意の順番で構わない

基本型
    整数型
        byte short int long 
    不動小数点型
        float
            32bit
        double 
            floatの倍のビット数(64bit)を用いて幅広い小数点以下を含む範囲の数字を扱えるデータ型
            「浮動」小数点数と呼ばれるのは、数字の整数部と小数部の長さが可変なので、小数点の位置が数字に合わせて移動するからである
    文字型
        char
    ブール型
        boolean
参照型
    インスタンスのメモリ中の場所を表す
抽象クラス
    インスタンスを作れないクラス
    具体的なサブクラスを定義するための先祖を定義しておくことである
    
インターフェース
    メソッドや変数を持ったクラスではなく「行員メソッドを持っていること」という約束だけを表すモノ。
    幾つでも指定することができる
this
    フィールド変数への参照となり、グローバル変数とローカル変数を区別することができる
Math.random()
    0.0~1.0未満の範囲でdouble型の乱数を取得できる
instanceof演算子
    あるオブジェクトの型を動的に判定するための演算子
    指定の方であればtrue
Mathクラス
    指数関数、対数関数、平方根、および三角関数といった基本的な数値処理を実行するためのメソッドを含む
オーバーロード
    同じクラスの中でメソッド名と戻り値の型が同じで、引数の型や数、並び順が違うメソッドを2つ以上定義すること
    同じような処理だが、一部を変数にして処理結果をより自由に変えたい場合などで使うと便利
オーバーライド
    継承した子クラスで親クラスと同じメソッド名のまま、処理内容を変更して再定義
    引数の型や数、並び順は親クラスのそれと同じ

クラスとサブクラス
    サブクラスが呼び出されると、必ず親クラスが呼び出される
        明示的に呼び出さないと、引数なしのコンストラクタが呼び出される
    コンストラクトを1つも明示的に定義しないと、自動的に引数なしのコンストラクタが定義される
        「super();」と書いたのとおなじになる．
    1つでもコンストラクトを明示的に定義すると、自動的なコンストラクタ定義は行われない
        A1には明示的なコンストラクタがあるので、引数なしのコンストラクタが自動的に定義されることはない
    自動的に定義されるのは引数なしのコンストラクタだけ
        親クラスに引数のあるコンストラクタはないのでエラーになる

抽象クラス
    必ずabstractキーワードがついている
    インスタンスを作ることができない
    抽象メソッドを持っていなくても良い
    抽象メソッドを持つクラスは必ず抽象クラスである
    抽象クラスのサブクラスは具象クラスでなくても良い

親クラスのコンストラクタ呼び出しを書かないと、自動的に引数なしのコンストラクタが呼び出される

文字列の比較
== と　equals
    ==　プリミティブ型
        文字列　参照先を見る　falseとなる
        エラーにはならない
    equals 参照データ型野地寺列比較
        大文字と小文字を区別する
        否定の論理演算子！を使うことで判定を逆にすることができる
        注意
            nullが入ったオブジェクトからメソッドを呼びで出す
                比較する文字列を先に持ってくる